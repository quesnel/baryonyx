/* Copyright (C) 2017 INRA
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef ORG_VLEPROJECT_BARYONYX_SOLVER_CORE_COMPARE
#define ORG_VLEPROJECT_BARYONYX_SOLVER_CORE_COMPARE

#include <baryonyx/core>

namespace baryonyx {

inline bool
operator==(const variable_value& lhs, const variable_value& rhs) noexcept
{
    return lhs.min == rhs.min and lhs.max == rhs.max and lhs.type == rhs.type;
}

inline bool
operator==(const variables& lhs, const variables& rhs) noexcept
{
    return lhs.names == rhs.names and lhs.values == rhs.values;
}

inline bool
operator<(const function_element& lhs, const function_element& rhs)
{
    return lhs.variable_index < rhs.variable_index;
}

inline bool
operator==(const function_element& lhs, const function_element& rhs) noexcept
{
    return lhs.factor == rhs.factor and
           lhs.variable_index == rhs.variable_index;
}

inline bool
operator==(const constraint& lhs, const constraint& rhs) noexcept
{
    return lhs.elements == rhs.elements and lhs.value == rhs.value and
           lhs.label == rhs.label;
}

inline bool
operator==(const objective_function& lhs,
           const objective_function& rhs) noexcept
{
    return lhs.elements == rhs.elements and lhs.constant == rhs.constant;
}

inline bool
operator==(const problem& lhs, const problem& rhs) noexcept
{
    return lhs.type == rhs.type and
           lhs.equal_constraints == rhs.equal_constraints and
           lhs.greater_constraints == rhs.greater_constraints and
           lhs.less_constraints == rhs.less_constraints and
           lhs.vars.names == rhs.vars.names and
           lhs.vars.values == rhs.vars.values and
           lhs.objective == rhs.objective;
}

inline bool
operator!=(const variable_value& lhs, const variable_value& rhs) noexcept
{
    return not(lhs == rhs);
}

inline bool
operator!=(const variables& lhs, const variables& rhs) noexcept
{
    return not(lhs == rhs);
}

inline bool
operator!=(const function_element& lhs, const function_element& rhs) noexcept
{
    return not(lhs == rhs);
}

inline bool
operator!=(const constraint& lhs, const constraint& rhs) noexcept
{
    return not(lhs == rhs);
}

inline bool
operator!=(const problem& lhs, const problem& rhs) noexcept
{
    return not(lhs == rhs);
}

} // namespace baryonyx

#endif
