/* Copyright (C) 2017 INRA
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef ORG_VLEPROJECT_BARYONYX_SOLVER_CORE
#define ORG_VLEPROJECT_BARYONYX_SOLVER_CORE

#include <algorithm>
#include <chrono>
#include <limits>
#include <memory>
#include <stdexcept>
#include <string>
#include <tuple>
#include <unordered_map>
#include <vector>

#include <cstdarg>
#include <cstdio>

#if defined _WIN32 || defined __CYGWIN__
#define BARYONYX_HELPER_DLL_IMPORT __declspec(dllimport)
#define BARYONYX_HELPER_DLL_EXPORT __declspec(dllexport)
#define BARYONYX_HELPER_DLL_LOCAL
#else
#if __GNUC__ >= 4
#define BARYONYX_HELPER_DLL_IMPORT __attribute__((visibility("default")))
#define BARYONYX_HELPER_DLL_EXPORT __attribute__((visibility("default")))
#define BARYONYX_HELPER_DLL_LOCAL __attribute__((visibility("hidden")))
#else
#define BARYONYX_HELPER_DLL_IMPORT
#define BARYONYX_HELPER_DLL_EXPORT
#define BARYONYX_HELPER_DLL_LOCAL
#endif
#endif

#ifdef BARYONYX_DLL
#ifdef libbaryonyx_EXPORTS
#define BARYONYX_API BARYONYX_HELPER_DLL_EXPORT
#else
#define BARYONYX_API BARYONYX_HELPER_DLL_IMPORT
#endif
#define BARYONYX_LOCAL BARYONYX_HELPER_DLL_LOCAL
#define BARYONYX_MODULE BARYONYX_HELPER_DLL_EXPORT
#else
#define BARYONYX_API
#define BARYONYX_LOCAL
#define BARYONYX_MODULE BARYONYX_HELPER_DLL_EXPORT
#endif

#if defined(__GNUC__)
#define BARYONYX_FORMAT(idformat, idarg)                                      \
    __attribute__((format(printf, (idformat), (idarg))))
#else
#define BARYONYX_FORMAT(idformat, idarg)
#endif

namespace baryonyx {

/** @c index is used as accessor for all array. */
using index = int;

struct precondition_failure : std::logic_error
{
    precondition_failure(const char* msg)
      : std::logic_error(msg)
    {
    }
};

struct postcondition_failure : std::logic_error
{
    postcondition_failure(const char* msg)
      : std::logic_error(msg)
    {
    }
};

struct numeric_cast_failure : public std::exception
{
    const char* what() const noexcept override
    {
        return "numeric cast error: loss of range in numeric_cast";
    }
};

/**
 * @brief @c is_numeric_castable checks if two integer are castable.
 *
 * @details Checks if the @c arg Source integer is castable into @c Target
 *     template. @c Source and @c Target must be integer. The test
 *     includes the limit of @c Target.
 *
 * @param arg The integer to test.
 * @return true if @c arg is castable to @c Target type.
 *
 * @code
 * int v1 = 10;
 * assert(lp::is_numeric_castable<std::int8_t>(v));
 *
 * int v2 = 278;
 * assert(not lp::is_numeric_castable<std::int8_t>(v2));
 * @endcode
 */
template<typename Target, typename Source>
inline bool
is_numeric_castable(Source arg) noexcept
{
    static_assert(std::is_integral<Source>::value, "Integer required.");
    static_assert(std::is_integral<Target>::value, "Integer required.");

    using arg_traits = std::numeric_limits<Source>;
    using result_traits = std::numeric_limits<Target>;

    if (result_traits::digits == arg_traits::digits and
        result_traits::is_signed == arg_traits::is_signed)
        return true;

    if (result_traits::digits > arg_traits::digits)
        return result_traits::is_signed or arg >= 0;

    if (arg_traits::is_signed and
        arg < static_cast<Source>(result_traits::min()))
        return false;

    return arg <= static_cast<Source>(result_traits::max());
}

/**
 * @brief @c numeric_cast cast @c s to @c Target type.
 *
 * @details Converts the integer type @c Source @c s into the integer type
 *     @c Target. If the value @c s is not castable to @c Target, @c
 *     numeric_cast throws an exception.
 *
 * @param s The integer to cast.
 * @return The cast integer.
 *
 * @code
 * std::vector<double> v(1024);
 * long int index = lp::numeric_cast<long int>(v); // No throw.
 * @endcode
 */
template<typename Target, typename Source>
inline Target
numeric_cast(Source s)
{
    if (not is_numeric_castable<Target>(s))
        throw numeric_cast_failure();

    return static_cast<Target>(s);
}

struct file_access_error
{
    std::string file;
    int error;
};

struct file_access_failure : std::runtime_error
{
    file_access_failure(std::string file, int error)
      : std::runtime_error("file_access_failure")
      , m_error{ std::move(file), error }
    {
    }

    std::string file() const
    {
        return m_error.file;
    }

    int error() const
    {
        return m_error.error;
    }

private:
    file_access_error m_error;
};

enum class file_format_error_tag
{
    end_of_file = 1,
    unknown,
    already_defined,
    incomplete,
    bad_name,
    bad_operator,
    bad_integer,
    bad_objective_function_type,
    bad_bound,
    bad_function_element,
    bad_constraint
};

struct file_format_error
{
    std::string element;
    int line;
    int column;
    file_format_error_tag tag;
};

struct file_format_failure : std::runtime_error
{
    file_format_failure(std::string element,
                        file_format_error_tag failure,
                        int line,
                        int column)
      : std::runtime_error("file_format_failure")
      , m_error{ std::move(element), line, column, failure }
    {
    }

    file_format_failure(file_format_error_tag failure, int line, int column)
      : std::runtime_error("file_format_failure")
      , m_error{ std::string(), line, column, failure }
    {
    }

    std::string element() const
    {
        return m_error.element;
    }

    int line() const
    {
        return m_error.line;
    }

    int column() const
    {
        return m_error.column;
    }

    file_format_error_tag failure() const
    {
        return m_error.tag;
    }

private:
    file_format_error m_error;
};

enum class problem_definition_error_tag
{
    empty_variables = 1,
    empty_objective_function,
    variable_not_used,
    bad_bound,
    multiple_constraint,
};

struct problem_definition_error
{
    std::string element;
    problem_definition_error_tag tag;
};

struct problem_definition_failure : std::runtime_error
{
    problem_definition_failure(std::string element,
                               problem_definition_error_tag failure)
      : std::runtime_error("problem_definition_failure")
      , m_error{ element, failure }
    {
    }

    std::string element() const
    {
        return m_error.element;
    }

    problem_definition_error_tag failure() const
    {
        return m_error.tag;
    }

private:
    problem_definition_error m_error;
};

enum class solver_error_tag
{
    no_solver_available = 1,
    unrealisable_constraint,
    not_enough_memory
};

struct solver_error
{
    solver_error_tag tag;
};

struct solver_failure : std::runtime_error
{
    solver_failure(solver_error_tag failure)
      : std::runtime_error("solver_failure")
      , m_error{ failure }
    {
    }

    solver_error_tag failure() const
    {
        return m_error.tag;
    }

private:
    solver_error m_error;
};

/**
 * @brief @c baryonyx::paramter is a simple class to represent a union
 *     between an integer, a real and a string (resp. @c long, @c double
 *     and @c std::string).
 *
 * @details Waiting for a compiler with the @c std::optional class, @c
 *     baryonyx::parameter implements an union between a @c long, a @c
 *     double and a @c std::string. @c baryonyx::parameter, by default,
 *     defines a @c long with the value of @c 0. Use the @c
 *     baryonyx::parameter::type function to get the current type stored
 *     into the @c baryonyx::parameter.
 */
class parameter
{
public:
    enum class tag
    {
        integer,
        real,
        string
    };

    parameter()
      : l(0)
      , type(tag::integer)
    {
    }

    explicit parameter(long value_)
      : l(value_)
      , type(tag::integer)
    {
    }

    explicit parameter(double value_)
      : d(value_)
      , type(tag::real)
    {
    }

    explicit parameter(const std::string& value_)
      : s(value_)
      , type(tag::string)
    {
    }

    parameter(const parameter& w)
      : type(w.type)
    {
        switch (w.type) {
        case tag::integer:
            l = w.l;
            break;
        case tag::real:
            d = w.d;
            break;
        case tag::string:
            new (&s) std::string(w.s);
            break;
        }
    }

    parameter(parameter&& w)
      : type(w.type)
    {
        switch (w.type) {
        case tag::integer:
            l = w.l;
            break;
        case tag::real:
            d = w.d;
            break;
        case tag::string:
            new (&s) std::string(w.s);
            break;
        }

        w.type = tag::integer;
        w.l = 0;
    }

    parameter& operator=(const parameter& w)
    {
        if (type == tag::string and w.type == tag::string) {
            s = w.s;
            return *this;
        }

        if (type == tag::string) {
            using std::string;
            s.~string();
        }

        switch (w.type) {
        case tag::integer:
            l = w.l;
            break;
        case tag::real:
            d = w.d;
            break;
        case tag::string:
            new (&s) std::string(w.s);
            break;
        }

        type = w.type;
        return *this;
    }

    parameter& operator=(parameter&& w)
    {
        if (type == tag::string and w.type == tag::string) {
            new (&s) std::string(w.s);
            w.type = tag::integer;
            w.l = 0;
            return *this;
        }

        if (type == tag::string) {
            using std::string;
            s.~string();
        }

        switch (w.type) {
        case tag::integer:
            l = w.l;
            break;
        case tag::real:
            d = w.d;
            break;
        case tag::string:
            new (&s) std::string(w.s);
            break;
        }

        type = w.type;

        w.type = tag::integer;
        w.l = 0;

        return *this;
    }

    parameter& operator=(double value)
    {
        if (type == tag::real) {
            d = value;
            return *this;
        }

        if (type == tag::string) {
            using std::string;
            s.~string();
        }

        type = tag::real;
        d = value;

        return *this;
    }

    parameter& operator=(long value)
    {
        if (type == tag::integer) {
            l = value;
            return *this;
        }

        if (type == tag::string) {
            using std::string;
            s.~string();
        }

        type = tag::integer;
        l = value;

        return *this;
    }

    parameter& operator=(const std::string& value)
    {
        if (type == tag::string) {
            s = value;
            return *this;
        }

        if (type == tag::string) {
            using std::string;
            s.~string();
        }

        type = tag::string;
        new (&s) std::string(value);

        return *this;
    }

    ~parameter() noexcept
    {
        if (type == tag::string) {
            using std::string;
            s.~string();
        }
    }

    void swap(parameter& p)
    {
        parameter copy(*this);
        *this = p;
        p = copy;
    }

    union
    {
        long l;
        double d;
        std::string s;
    };

    tag type;
};

/**
 * @brief @c baryonyx::context stores logging system and all parameters.
 *
 * @details @c baryonyx::context manages the logging system via a subclass
 *     @c baryonyx::context::logger which writes logs to the user defined
 *     storage. @c baryonyx::context stores a set of parameters for
 *     solvers. Default, the logging system is active and the call to the
 *     @c log function are send to the logger functor. Define
 *     BARYONYX_DISABLE_LOGGING as preprocessor value to hide all logging
 *     message.
 */
class BARYONYX_API context
{
public:
    enum class message_type
    {
        emerg,   ///< system is unusable
        alert,   ///< action must be taken immediately
        crit,    ///< critical conditions
        err,     ///< error conditions
        warning, ///< warning conditions
        notice,  ///< normal, but significant, condition
        info,    ///< informational message
        debug,   ///< debug-level message
    };

    class logger
    {
    public:
        logger() = default;
        virtual ~logger() = default;

        virtual void write(int priority,
                           const char* file,
                           int line,
                           const char* fn,
                           const char* fornmat,
                           va_list args) noexcept = 0;

        virtual void write(context::message_type type,
                           const char* format,
                           va_list args) noexcept = 0;
    };

    context() = default;

    context(const context&) = delete;
    context& operator=(const context&) = delete;

    /**
     * @brief Parse the command line argument using the `getopt_long`
     *     function.
     *
     * @details Parse the command line and search for strings "-p
     *     [str:value]" and store @c str as argument's name and tries to
     *     convert the @c value in @c baryonyx::parameter.
     *
     * @code
     * int main(int argc, char *argv[])
     * {
     *     auto ctx = baryonyx::make_context();
     *     int i = ctx->parse(argc, argv);
     *     if (i < 0)
     *         return EXIT_FAILURE;
     *
     *     if (ctx->get_integer_parameter("limit", 1000l) <= 0) {
     *         printf("negative limit parameters, assume 1000.\n");
     *         ctx->set_parameter("limit", 1000l);
     *     }
     *
     *     for (; i != argc; ++i) {
     *         baryonyx::make_problem(argv[i]);
     *         ...
     *     }
     * }
     * @endcode
     *
     * @return -1 if an error occurred when parsing command argument or
     *     the file to parse int the `argv`.
     */
    int parse(int argc, char* argv[]) noexcept;

    void set_parameter(const std::string& name, double p) noexcept;
    void set_parameter(const std::string& name, long int p) noexcept;
    void set_parameter(const std::string& name, std::string p) noexcept;

    double get_real_parameter(const std::string& name, double def) const
      noexcept;

    long int get_integer_parameter(const std::string& name, long int def) const
      noexcept;

    std::string get_string_parameter(const std::string& name,
                                     std::string def) const noexcept;

    void set_log_priority(int priority) noexcept;
    int get_log_priority() const noexcept;

    bool optimize() const noexcept;

    void set_standard_stream_logger() noexcept;
    void set_logger(std::unique_ptr<logger> function) noexcept;

    void info(const char* format, ...) const noexcept BARYONYX_FORMAT(2, 3);
    void debug(const char* format, ...) const noexcept BARYONYX_FORMAT(2, 3);
    void warning(const char* format, ...) const noexcept BARYONYX_FORMAT(2, 3);
    void error(const char* format, ...) const noexcept BARYONYX_FORMAT(2, 3);

    void log(message_type, const char* format, ...) const
      noexcept BARYONYX_FORMAT(3, 4);
    void log(int priority,
             const char* file,
             int line,
             const char* fn,
             const char* format,
             ...) const noexcept BARYONYX_FORMAT(6, 7);

private:
    std::unordered_map<std::string, parameter> m_parameters;
    std::unique_ptr<logger> m_logger;
    int m_log_priority = 7;
    bool m_optimize = false;
};

enum class variable_type
{
    real,
    binary,
    general
};

enum class objective_function_type
{
    undefined,
    maximize,
    minimize
};

enum class operator_type
{
    undefined,
    equal,
    greater,
    less,
};

struct variable_value
{
    int min = { 0 };
    int max = std::numeric_limits<int>::max();
    variable_type type = variable_type::real;
};

struct variables
{
    std::vector<std::string> names;
    std::vector<variable_value> values;
};

struct function_element
{
    function_element(int factor_, index variable_index_) noexcept
      : factor(factor_)
      , variable_index(variable_index_)
    {
    }

    int factor = { 0 };
    index variable_index{ -1 };
};

struct constraint
{
    std::string label;
    std::vector<function_element> elements;
    int value = { 0 };
};

struct objective_function
{
    std::vector<function_element> elements;
    int value = { 0 };
};

struct affected_variables
{
    void push_back(std::string name, int value)
    {
        names.emplace_back(name);
        values.emplace_back(value);
    }

    std::vector<std::string> names;
    std::vector<int> values;
};

struct problem
{
    objective_function objective;

    std::vector<constraint> equal_constraints;
    std::vector<constraint> greater_constraints;
    std::vector<constraint> less_constraints;

    variables vars;
    affected_variables affected_vars;

    objective_function_type type = { objective_function_type::maximize };
};

/**
 * @details Compute the number of constaints of the @c baryonyx::problem.
 *
 * @param pb An baryonyx::problem.
 * @return The number of constraints in the @c baryonyx::problem.
 */
inline std::size_t
size(const baryonyx::problem& pb) noexcept
{
    return pb.equal_constraints.size() + pb.greater_constraints.size() +
           pb.less_constraints.size();
}

/**
 * @details Recover all memory allocated for all container of the @c
 *     baryonyx::problem. After this function, the @c baryonyx::problem is
 *     completely empty of data and can be reuse.
 *
 * @param pb The problem to clear.
 */
inline void
clear(baryonyx::problem& pb) noexcept
{
    std::vector<function_element>().swap(pb.objective.elements);

    std::vector<constraint>().swap(pb.equal_constraints);
    std::vector<constraint>().swap(pb.greater_constraints);
    std::vector<constraint>().swap(pb.less_constraints);

    std::vector<std::string>().swap(pb.vars.names);
    std::vector<variable_value>().swap(pb.vars.values);

    std::vector<std::string>().swap(pb.affected_vars.names);
    std::vector<int>().swap(pb.affected_vars.values);
}

enum class result_status
{
    uninitialized,
    success,
    time_limit_reached,
    kappa_max_reached,
    limit_reached
};

struct result
{
    std::string method;

    std::vector<std::string> variable_name;
    std::vector<int> variable_value;
    affected_variables affected_vars;
    double duration = 0.0;
    double value = 0.0;
    index loop = 0;
    index variables = 0;
    index constraints = 0;
    index remaining_constraints = std::numeric_limits<index>::max();

    result_status status = result_status::uninitialized;
};

inline std::tuple<double, double>
compute_min_max_objective_function(const problem& pb) noexcept
{
    std::tuple<double, double> ret{ pb.objective.value, pb.objective.value };

    for (const auto& elem : pb.objective.elements)
        if (elem.factor < 0)
            std::get<0>(ret) += elem.factor;
        else if (elem.factor > 0)
            std::get<1>(ret) += elem.factor;
        else
            std::get<1>(ret) += 1;

    return ret;
}

/**
 * Read a @e lp file from the @e file.
 *
 * @exception baryonyx::file_format_error, baryonyx::file_access_error,
 *     std::system_error.
 */
BARYONYX_API
problem
make_problem(std::shared_ptr<baryonyx::context> ctx,
             const std::string& filename);

/**
 * Read a @e lp file from the @e is stream.
 *
 * @exception baryonyx::file_format_error, baryonyx::file_access_error,
 *     std::system_error.
 */
BARYONYX_API
problem
make_problem(std::shared_ptr<baryonyx::context> ctx, std::istream& is);

/**
 * Write @e lp problem into a stream.
 *
 */
BARYONYX_API
std::ostream&
operator<<(std::ostream& os, const problem& p);

/**
 * @details Try to solve or find a feasible solution for the @c
 *     baryonyx::problem.
 *
 * @param pb Problem definition.
 *
 * @exception baryonyx::solver_error
 * @exception baryonyx::problem_definition
 */
BARYONYX_API
result
solve(std::shared_ptr<baryonyx::context> ctx, problem& pb);

/**
 * @details Try to optimize the @c baryonyx::problem with a set of
 *     parameters.
 *
 * @param pb Problem definition.
 *
 * @return A representation of the result.
 *
 * @throw @c baryonyx::solver_error.
 */
BARYONYX_API
result
optimize(std::shared_ptr<baryonyx::context> ctx, problem& pb);

BARYONYX_API
bool
is_valid_solution(const problem& pb, const std::vector<int>& variable_value);

BARYONYX_API
double
compute_solution(const problem& pb, const std::vector<int>& variable_value);
}

#endif
